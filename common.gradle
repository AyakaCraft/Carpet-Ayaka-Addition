apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "fabric-loom"
apply plugin: "com.replaymod.preprocess"
apply plugin: "com.modrinth.minotaur"
apply plugin: "com.matthewprenger.cursegradle"

int mcVersion = project.mcVersion

repositories {
    maven {
        url = "https://masa.dy.fi/maven"
    }
    maven {
        url = "https://maven.fallenbreath.me/releases"  // Fallen orz
    }
    maven {
        url = "https://jitpack.io"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }

}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude(group: "net.fabricmc", module: "fabric-loader")
    modCompileOnly.exclude(group: "com.github.2No2Name", module: "McTester")
    modImplementation.exclude(group: "com.github.2No2Name", module: "McTester")
}

dependencies {
    // loom
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")

    // mods
    modImplementation("carpet:fabric-carpet:${project.carpet_core_version}")

    modCompileOnly("carpettisaddition:carpet-tis-addition:${project.tis_version}")
    modCompileOnly("maven.modrinth:gca:${project.gugle_version}")

}

var MIXIN_CONFIG_PATH = "carpet-ayaka-addition.mixins.json"
var JAVA_COMPATIBILITY
if (mcVersion >= 12005) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_21
} else if (mcVersion >= 11800) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_16
} else {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}
var MIXIN_COMPATIBILITY_LEVEL = JAVA_COMPATIBILITY

loom {
    var commonVmArgs = ["-Dmixin.debug.export=true"]
    runConfigs.configureEach {
        runDir "../../run"
        vmArgs commonVmArgs
        ideConfigGenerated true
    }

    runs {
        var auditVmArgs = [*commonVmArgs, "-Dcarpetayakaaddition.mixin_audit=true"]
        serverMixinAudit {
            server()
            vmArgs auditVmArgs
            ideConfigGenerated false
        }
        clientMixinAudit {
            client()
            vmArgs auditVmArgs
            ideConfigGenerated false
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    exclude("META-INF")
    archiveClassifier.set("shadow")
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

tasks.withType(ShadowJar).configureEach {
    enableRelocation(true)
    relocationPrefix("carpetayakaaddition.libs")
}

remapJar {
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)
    inputFile = shadowJar.archiveFile
}

var modVersionSuffix = ""
var artifactVersion = project.mod_version
var artifactVersionSuffix = ""
// detect github action environment variables
// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
if (System.getenv("BUILD_RELEASE") != "true") {
    var buildNumber = System.getenv("BUILD_ID")
    modVersionSuffix += buildNumber != null ? ("+build." + buildNumber) : "-SNAPSHOT"
    artifactVersionSuffix = "-SNAPSHOT"  // A non-release artifact is always a SNAPSHOT artifact
}
var fullModVersion = project.mod_version + modVersionSuffix
var fullProjectVersion, fullArtifactVersion

// Example version values:
//   project.mod_version     1.0.3                      (the base mod version)
//   modVersionSuffix        +build.88                  (use github action build number if possible)
//   artifactVersionSuffix   -SNAPSHOT
//   fullModVersion          1.0.3+build.88             (the actual mod version to use in the mod)
//   fullProjectVersion      v1.0.3-mc1.15.2+build.88   (in build output jar name)
//   fullArtifactVersion     1.0.3-mc1.15.2-SNAPSHOT    (maven artifact version)

group = project.maven_group
if (System.getenv("JITPACK") == "true") {
    // move mc version into archivesBaseName, so jitpack will be able to organize archives from multiple subprojects correctly
    base.archivesName = project.archives_base_name + "-mc" + project.minecraft_version
    fullProjectVersion = "v" + project.mod_version + modVersionSuffix
    //fullArtifactVersion = artifactVersion + artifactVersionSuffix
} else {
    base.archivesName = project.archives_base_name
    fullProjectVersion = "v" + project.mod_version + "-mc" + project.minecraft_version + modVersionSuffix
    //fullArtifactVersion = artifactVersion + "-mc" + project.minecraft_version + artifactVersionSuffix
}
version = fullProjectVersion

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
    inputs.with {
        property("id", project.mod_id)
        property("name", project.mod_name)
        property("version", fullModVersion)
    }

    filesMatching("fabric.mod.json") {
        expand([
                "id"               : project.mod_id,
                "name"             : project.mod_name,
                "version"          : fullModVersion,
                "carpet_dependency": project.carpet_dependency,
                "minecraft_version": project.minecraft_version
        ])
    }

    filesMatching(MIXIN_CONFIG_PATH) {
        expand(["COMPATIBILITY_LEVEL": "JAVA_${MIXIN_COMPATIBILITY_LEVEL.ordinal() + 1}"])
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    if (JAVA_COMPATIBILITY <= JavaVersion.VERSION_1_8) {
        // suppressed "source/target value 8 is obsolete and will be removed in a future release"
        options.compilerArgs << "-Xlint:-options"
    }
}

java {
    sourceCompatibility = JAVA_COMPATIBILITY
    targetCompatibility = JAVA_COMPATIBILITY
}

jar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${project.archives_base_name}" }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "carpet-ayaka-addition"
    versionNumber = fullProjectVersion
    versionType = "release"
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    // syncBodyFrom = rootProject.file("README.md").text
    dependencies {
        required.project("fabric-api")
        required.project("carpet")
        optional.project("carpet-tis-addition")
        optional.project("gca")
    }
}

curseforge {
    project {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        id = "1220026"
        mainArtifact(remapJar)
        releaseType = "release"
        addGameVersion(project.minecraft_version)
        addGameVersion("fabric")
        relations {
            requiredDependency("fabric-api")
            requiredDependency("carpet")
            optionalDependency("carpet-tis-addition")
            optionalDependency("guglecarpetaddition")
        }
    }

    options {
        forgeGradleIntegration = false
    }
}
