import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

apply plugin: "com.gradleup.shadow"
apply plugin: "fabric-loom"
apply plugin: "com.replaymod.preprocess"
apply plugin: "com.hypherionmc.modutils.modpublisher"
apply plugin: "com.github.hierynomus.license"
apply plugin: "maven-publish"

Map<String, ?> properties = project.getProperties()

int mcVersion = (Integer) properties.mcVersion

boolean releasing = System.getenv("BUILD_RELEASE") == "true"

repositories {
    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }
    maven {
        name = "masa"
        url = "https://masa.dy.fi/maven"
    }
    maven {
        name = "Fallen"
        url = "https://maven.fallenbreath.me/releases"  // Fallen orz
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"
    }
    maven {
        name = "CurseMaven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Nucleoid"
        url = "https://maven.nucleoid.xyz/"
    }

}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude(group: "net.fabricmc", module: "fabric-loader")
    modCompileOnly.exclude(group: "com.github.2No2Name", module: "McTester")
    modImplementation.exclude(group: "com.github.2No2Name", module: "McTester")
}

dependencies {
    // loom
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")

    // fabric
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    // We currently don't need fabric-api
    // modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")

    //libs
    include(modImplementation("me.fallenbreath:conditional-mixin-fabric:${project.conditionalmixin_version}"))

    // mods
    modImplementation("carpet:fabric-carpet:${project.carpet_core_version}")

    modImplementation("carpettisaddition:carpet-tis-addition:${project.tis_version}")

    if (mcVersion >= 12000) {
        modImplementation("maven.modrinth:gca:${project.gugle_version}")
    } else {
        modCompileOnly("maven.modrinth:gca:${project.gugle_version}")
    }

    if (!releasing) {
        if (mcVersion >= 11500) {
            modRuntimeOnly("com.terraformersmc:modmenu:${project.modmenu_version}")
            if (mcVersion >= 12006) {
                modRuntimeOnly("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")
                modRuntimeOnly("eu.pb4:placeholder-api:${project.placeholder_version}")
            }
        }

        if (mcVersion >= 11600) {
            if (mcVersion < 11900) {
                modRuntimeOnly("maven.modrinth:lazydfu:0.1.2")
            } else if (mcVersion < 12100) {
                modRuntimeOnly("maven.modrinth:lazydfu:0.1.3")
            }
        }
    }

}

var MIXIN_CONFIG_PATH = "carpet-ayaka-addition.mixins.json"
var JAVA_COMPATIBILITY
if (mcVersion >= 12005) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_21
} else if (mcVersion >= 11800) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_16
} else {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}
var MIXIN_COMPATIBILITY_LEVEL = JAVA_COMPATIBILITY

loom {
    var commonVmArgs = ["-Dmixin.debug.export=true"]
    runConfigs.configureEach {
        runDir "../../run"
        vmArgs commonVmArgs
        ideConfigGenerated true
    }

    runs {
        var auditVmArgs = [*commonVmArgs, "-Dcarpetayakaaddition.mixin_audit=true"]
        serverMixinAudit {
            server()
            vmArgs auditVmArgs
            ideConfigGenerated false
        }
        clientMixinAudit {
            client()
            vmArgs auditVmArgs
            ideConfigGenerated false
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    exclude("META-INF")
    archiveClassifier = "shadow"
}

tasks.withType(ShadowJar).configureEach {
    enableRelocation = true
    relocationPrefix = "carpetayakaaddition.libs"
}

remapJar {
    dependsOn(tasks.shadowJar)
    mustRunAfter(tasks.shadowJar)
    inputFile = tasks.shadowJar.archiveFile
}

var modVersionSuffix = ""
//var artifactVersion = project.mod_version
//var artifactVersionSuffix = ""
// detect github action environment variables
// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
if (!releasing) {
    var buildNumber = System.getenv("BUILD_ID")
    modVersionSuffix += buildNumber != null ? ("+build." + buildNumber) : "-SNAPSHOT"
    //artifactVersionSuffix = "-SNAPSHOT"  // A non-release artifact is always a SNAPSHOT artifact
}
var fullModVersion = project.mod_version + modVersionSuffix
var fullProjectVersion, fullArtifactVersion

// Example version values:
//   project.mod_version     1.0.3                      (the base mod version)
//   modVersionSuffix        +build.88                  (use github action build number if possible)
//   artifactVersionSuffix   -SNAPSHOT
//   fullModVersion          1.0.3+build.88             (the actual mod version to use in the mod)
//   fullProjectVersion      v1.0.3-mc1.15.2+build.88   (in build output jar name)
//   fullArtifactVersion     1.0.3-mc1.15.2-SNAPSHOT    (maven artifact version)

base.archivesName = project.archives_base_name
fullProjectVersion = "v${project.mod_version}-mc${project.minecraft_version}${modVersionSuffix}"
fullArtifactVersion = "${project.mod_version}-mc${project.minecraft_version}"
version = fullProjectVersion

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
    inputs.with {
        property("id", project.mod_id)
        property("name", project.mod_name)
        property("version", fullModVersion)
    }

    filesMatching("fabric.mod.json") {
        expand([
                "id"               : properties.mod_id,
                "name"             : properties.mod_name,
                "version"          : fullModVersion,
                "carpet_dependency": properties.carpet_dependency,
                "minecraft_version": properties.minecraft_version,
                "loader_min"       : properties.loader_min
        ])
    }

    filesMatching(MIXIN_CONFIG_PATH) {
        expand(["COMPATIBILITY_LEVEL": "JAVA_${MIXIN_COMPATIBILITY_LEVEL.ordinal() + 1}"])
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    if (JAVA_COMPATIBILITY <= JavaVersion.VERSION_1_8) {
        // suppressed "source/target value 8 is obsolete and will be removed in a future release"
        options.compilerArgs << "-Xlint:-options"
    }
}

java {
    sourceCompatibility = JAVA_COMPATIBILITY
    targetCompatibility = JAVA_COMPATIBILITY

    withSourcesJar()
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${properties.archives_base_name}" }
    }
}

// https://github.com/hierynomus/license-gradle-plugin
license {
    // use "gradle licenseFormat" to apply license headers
    header = rootProject.file('HEADER')
    include '**/*.java'
    skipExistingHeaders = true

    headerDefinitions {
        // ref: https://github.com/mathieucarbou/license-maven-plugin/blob/4c42374bb737378f5022a3a36849d5e23ac326ea/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/header/HeaderType.java#L48
        // modification: add a newline at the end
        SLASHSTAR_STYLE_NEWLINE {
            firstLine = "/*"
            beforeEachLine = " * "
            endLine = " */" + System.lineSeparator()
            afterEachLine = ""
            skipLinePattern = null
            firstLineDetectionPattern = "(\\s|\\t)*/\\*.*\$"
            lastLineDetectionPattern = ".*\\*/(\\s|\\t)*\$"
            allowBlankLines = false
            isMultiline = true
            padLines = false
        }
    }
    mapping {
        java = 'SLASHSTAR_STYLE_NEWLINE'
    }
    ext {
        name = project.mod_name
        author = "Calboot"
        year = Calendar.getInstance().get(Calendar.YEAR).toString()
    }
}
tasks.classes.dependsOn(tasks.licenseFormatMain)
tasks.testClasses.dependsOn(tasks.licenseFormatTest)

publisher {

    apiKeys {
        modrinth System.getenv("MODRINTH_TOKEN") ?: "unset"
        curseforge System.getenv("CURSEFORGE_TOKEN") ?: "unset"
    }

    //setDebug(true)

    setCurseID("1220026")
    setModrinthID("hGOHBiok")

    setVersionType("release")
    setChangelog("See github releases for more information")

    setProjectVersion(fullProjectVersion)
    setGameVersions([project.minecraft_version])
    setLoaders("fabric")

    setArtifact(tasks.remapJar)

    if (mcVersion < 11700) {
        setJavaVersions([JavaVersion.VERSION_1_8])
    }

    curseDepends {
        required "carpet"
        optional "carpet-tis-addition", "guglecarpetaddition"
    }

    modrinthDepends {
        required "carpet"
        optional "carpet-tis-addition", "gca"
    }

}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = base.archivesName.get()
            version = fullArtifactVersion
        }
    }

    // select the repositories you want to publish to
    repositories {
        maven {
            allowInsecureProtocol = true
            name = "AyakaCraft"
            url = "http://222.186.148.96:7000/releases"
            credentials(PasswordCredentials) {
                username = "Publisher"
                password = System.getenv("AYAKA_MAVEN_TOKEN")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
